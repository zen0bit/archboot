#!/bin/bash
__appname__="archboot"
__version__="v1.7"
__author__="@grm34"
__date__="2017"
__license__="Apache v2.0 License"

##################
## GLOBAL STYLE ##
##################
red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
blue="\e[1;34m"
pink="\e[1;35m"
cyan="\e[1;36m"
nc="\e[0m"

_banner() {
    echo -e "$red\n\n       █▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█" >&2
    echo -e "       █$yellow     Archboot $__version__     $red█" >&2
    echo -e "       █$yellow ArchLinux Base System $red█" >&2
    echo -e "       █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█\n"$nc >&2
}

_prompt() {
   echo -e $yellow"\n==> $green$1 $red$2"$nc >&2
   echo -e $yellow"==> ------------------------------------"$nc >&2
   echo -ne $yellow"==> "$nc >&2
}

_confirm() {
    echo -e $green"\n==> $red$1 $cyan[ENTER]"$nc >&2
    echo -ne $green"==> "$nc >&2
    read -s confirm
}

_info() {
    echo -e $cyan"\n==> $1..."$nc && sleep 2s
}

_note() {
    echo -e $cyan"\nNOTE:$nc $1" >&2
}

_error() {
    echo -e $red"\nERROR:$nc $1" >&2
    exit
}

_warning() {
    echo -e $yellow"\nWARNiNG:$nc $1" >&2
}

##############
## SETTiNGS ##
##############
_settings() {

    # Hostname
    until [[ ${#HOST_name} -ge 3 \
    && ${HOST_name} =~ ^[a-zA-Z0-9][-a-zA-Z0-9_]+$ ]]; do
    _prompt "Enter Hostname (ex: my-computer):"
    read HOST_name
    done

    # Password
    _prompt "Enter password for root:"
    read -s i
    _prompt "Confirm password for root:"
    read -s ROOT_passwd
    if [[ ${ROOT_passwd} != ${i} ]]; then
        _error "passwords does not match!"
    fi
}

##################
## ARCHBOOT LOG ##
##################
_logs() {
    _info "Setting archboot log"
    datetime=`date '+%d-%m-%Y_%Hh%Mm%Ss'`
    logfile="install_arch_$datetime.log"
}

########################
## FiRMWARE DETECTiON ##
########################
_firmware() {
    _info "Firmware detection"
    efivar -l >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        FIRMWARE="UEFI"
        part_table="GPT"
        part_code="g"
        part_type=""
        boot_filesystem="fat -F 32"
        _note "found UEFI firmware."
    else
        FIRMWARE="BIOS"
        part_table="MBR"
        part_code="o"
        part_type="p\n"
        boot_filesystem="ext2"
        _note "found BIOS firmware."
    fi
    part_order=(0 1 2 3 4)
}

#######################
## DiSK PARTiTiONiNG ##
#######################
_disk_part() {

    # MBR or GPT
    _confirm "$FIRMWARE detected. Listing disk"
    until [[ ${_disk} =~ ^(sd|hd)[a-z]{1}$ ]]; do
    fdisk -l
    _prompt "Enter disk to use (ex: sda):"
    read _disk
    done
    fdisk -l /dev/$_disk
    _warning "this will erase the entire drive!"
    _confirm "Setting $part_table partition table on /dev/$_disk"
    printf "$part_code\nw" | fdisk /dev/$_disk
  cfdisk
}

#########################
## MOUNTiNG PARTiTiONS ##
#########################
_mount_part() {
    _confirm "Mount partitions & activate swap"
    mount /dev/$_disk${part_order[3]} /mnt
    mkdir /mnt/{boot,home}
    if [[ "$FIRMWARE" == "UEFI" ]]; then
        mkdir -p /mnt/boot/efi/EFI
        mount -t vfat /dev/$_disk${part_order[1]} /mnt/boot/efi
    else
        mount /dev/$_disk${part_order[1]} /mnt/boot
    fi
    swapon /dev/$_disk${part_order[2]}
    mount /dev/$_disk${part_order[4]} /mnt/home
}

#################
## BASE SYSTEM ##
#################
_install_base() {
    _info "Installing base system"
    yes '' | pacstrap /mnt base base-devel
    _info "Setting fstab"
    genfstab -U -p /mnt >> /mnt/etc/fstab
    _info "Chrooting to fresh system"
    arch-chroot /mnt /bin/bash <<EOF
    echo -e "==> Setting root password..." && sleep 2s
    echo "root:${ROOT_passwd}" | chpasswd
    echo -e "==> Setting hostname..." && sleep 2s
    echo $HOST_name > /etc/hostname
    echo -e "==> Setting and generating locale..." && sleep 2s
    echo nano /etc/locale.gen && locale-gen
    export LANG=cs_CZ.UTF-8
    echo nano /etc/locale.conf
    echo -e "==> Setting keyboard..." && sleep 2s
    echo nano /etc/vconsole.conf
    echo -e "==> Setting Linux environment..." && sleep 2s
    mkinitcpio -p linux
    echo -e "==> Installing network..." && sleep 2s
    pacman --noconfirm -S networkmanager wireless_tools wpa_supplicant
    systemctl enable NetworkManager.service
    echo -e "==> Installing required packages..." && sleep 2s
    pacman --noconfirm -S wget reflector git inxi
EOF
}

################
## BOOTLOADER ##
################
_bootloader() {
    _confirm "Base system ok. Installing $FIRMWARE Bootloader?"
    arch-chroot /mnt /bin/bash <<EOF
    pacman --noconfirm -S grub os-prober gptfdisk efibootmgr
EOF
    if [[ "$FIRMWARE" == "UEFI" ]]; then
        arch-chroot /mnt /bin/bash <<EOF
        grub-install --target=x86_64-efi --efi-directory=/boot/efi \
        --bootloader-id=arch_grub --recheck
EOF
    else
        arch-chroot /mnt /bin/bash <<EOF
        grub-install --no-floppy --recheck /dev/$_disk
EOF
    fi
    _info "Installing Grub Theme"
    arch-chroot /mnt /bin/bash <<EOF
    grub-mkconfig -o /boot/grub/grub.cfg
    git clone git://github.com/Generator/Grub2-themes.git
    cp -r Grub2-themes/{Archlinux,Archxion} /boot/grub/themes/ && rm -r Grub2-themes
    sed -i -e 's/GRUB_GFXMODE=auto/GRUB_GFXMODE=1024x768/g' /etc/default/grub
    echo 'GRUB_THEME="/boot/grub/themes/Archlinux/theme.txt"' >> /etc/default/grub
    echo 'desktop-image: "background.png"' >> /boot/grub/themes/Archlinux/theme.txt
    grub-mkconfig -o /boot/grub/grub.cfg
    wget https://raw.githubusercontent.com/grm34/archboot/master/img/background.png
    mv background.png /boot/grub/themes/Archlinux/
EOF
}

#############
## iNSTALL ##
#############
_banner && _settings && _logs && _firmware && _disk_part && _mount_part
if [ $? -eq 0 ]; then
    _confirm "System ready. Do you wish to install ArchLinux?"
    (_install_base && _bootloader) 2>&1 | tee -a $logfile
    mkdir /mnt/var/log/archboot && cp $logfile /mnt/var/log/archboot/
    _note "Installation finished. Logfile: /var/log/archboot/"
else
    _error "partitionning error, run 'sh install_arch' to try again."
fi
_confirm "Done! $__appname__ $__version__ by $__author__ - $__license__"
umount -R /mnt && sleep 2s && reboot
