#!/bin/bash
__appname__="archboot"
__version__="v1.7"
__author__="@grm34"
__date__="2017"
__license__="Apache v2.0 License"

##################
## GLOBAL STYLE ##
##################
red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
blue="\e[1;34m"
pink="\e[1;35m"
cyan="\e[1;36m"
nc="\e[0m"

_banner() {
    echo -e "$red\n\n       █▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█" >&2
    echo -e "       █$yellow     Archboot $__version__     $red█" >&2
    echo -e "       █$yellow  Desktop Environment  $red█" >&2
    echo -e "       █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█\n"$nc >&2
}

_prompt() {
   echo -e "\n$yellow==> $green$1 $nc" >&2
   echo -e "$yellow==> ------------------------------------ $nc" >&2
   echo -ne "$yellow==> $nc" >&2
}

_confirm() {
    echo -e "\n$green==> $red$1 $cyan[ENTER]$nc" >&2
    echo -ne "$green==> $nc" >&2
    read -s confirm
}

_info() {
    echo -e $cyan"\n==> $1..."$nc && sleep 2s
}

_note() {
    echo -e $cyan"\nNOTE:$nc $1" >&2
}

_error() {
    echo -e $red"\nERROR:$nc $1" >&2
    exit
}

_warning() {
    echo -e $yellow"\nWARNiNG:$nc $1" >&2
}

##############
## SETTiNGS ##
##############
_settings() {

    # Username
    _prompt "Enter Username (ex: johnny):"
    read USER_name

    # Password
    _prompt "Enter password for ${USER_name}:"
    read -s i
    _prompt "Confirm password for ${USER_name}:"
    read -s USER_passwd
    if [[ ${USER_passwd} != ${i} ]]; then
        _error "passwords does not match!"
    fi

    # Add user
    _info "Setting user"
    useradd -g users -m -s /bin/bash $USER_name
    echo "${USER_name}:${USER_passwd}" | chpasswd
    echo "${USER_name} ALL=(ALL) ALL" >> /etc/sudoers

    # Aliases
    _info "Setting aliases"
    echo 'export VISUAL="nano"' >> /home/$USER_name/.bashrc
    echo "alias _system='inxi -F -M'" >> /home/$USER_name/.bashrc
    echo "alias _install='yaourt -S'" >> /home/$USER_name/.bashrc
    echo "alias _delete='yaourt -Rcsn'" >> /home/$USER_name/.bashrc
    echo "alias _update='yaourt -Syyua'" >> /home/$USER_name/.bashrc
    echo "alias _clean='yaourt -Scc'" >> /home/$USER_name/.bashrc
    echo "alias _purge='yaourt -Qdt'" >> /home/$USER_name/.bashrc
    echo "alias _verif='yaourt -Qqk'" >> /home/$USER_name/.bashrc
    echo "alias _pacnew='yaourt -C'" >> /home/$USER_name/.bashrc
    echo "alias _search='yaourt -s'" >> /home/$USER_name/.bashrc
    echo "alias _mirrorlist='sudo reflector -c FR --sort rate --save " \
    "/etc/pacman.d/mirrorlist'" >> /home/$USER_name/.bashrc
}

##################
## ARCHBOOT LOG ##
##################
_logs() {
    _info "Setting archboot log"
    datetime=`date '+%d-%m-%Y_%Hh%Mm%Ss'`
    logfile="/var/log/archboot/install_kde_$datetime.log"
    if [ ! -d "/var/log/archboot" ]; then
        mkdir /var/log/archboot
    fi
}

################
## GPU DRIVER ##
################
_gpu_driver() {
    _info "GPU detection"
    GPU_driver="xf86-video-vesa"

    # Intel GPU
    lspci | grep "VGA" | grep "Intel" >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        _note "found INTEL GPU"
        GPU_driver=" xf86-video-intel vulkan-intel mesa-libgl lib32-mesa-libgl"
    fi

    # ATI GPU
    lspci | grep "VGA" | grep "ATI" >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        _note "found ATI GPU"
        GPU_driver=" xf86-video-ati mesa-libgl lib32-mesa-libgl mesa-vdpau lib32-mesa-vdpau"
    fi

    # nVidia GPU
    lspci | grep "VGA" | grep "nVidia" >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        _note "found nVidia GPU"
        GPU_driver=" xf86-video-nouveau nouveau-dri libva-vdpau-driver"
    fi
}

############
## YAOURT ##
############
_install_yaourt() {
    _info "Setting pacman"
    echo "## CUSTOM PACMAN.CONF ##" > /etc/pacman.conf
    echo "[options]" >> /etc/pacman.conf
    echo "HoldPkg     = pacman glibc" >> /etc/pacman.conf
    echo "Architecture = auto" >> /etc/pacman.conf
    echo "ILoveCandy" >> /etc/pacman.conf
    echo "CheckSpace" >> /etc/pacman.conf
    echo "SigLevel    = Required DatabaseOptional" >> /etc/pacman.conf
    echo "LocalFileSigLevel = Optional" >> /etc/pacman.conf
    echo "[archlinuxfr]" >> /etc/pacman.conf
    echo "SigLevel = Never" >> /etc/pacman.conf
    echo "Server = http://repo.archlinux.fr/\$arch" >> /etc/pacman.conf
    echo "[core]" >> /etc/pacman.conf
    echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
    echo "[extra]">> /etc/pacman.conf
    echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
    echo "[community]" >> /etc/pacman.conf
    echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
    echo "[multilib]" >> /etc/pacman.conf
    echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
    _info "Setting mirrorlist"
    reflector -c FR --sort rate --save /etc/pacman.d/mirrorlist
    _info "Installing yaourt"
    pacman --noconfirm -Syu yaourt customizepkg
}

#####################
## KDE ENViRONMENT ##
#####################
_install_packages() {

    # GPU Driver
    _info "Installing VGA Driver"
    pacman --noconfirm -S $GPU_driver

    # Xorg
    _info "Installing Xorg"
    pacman --noconfirm -S xorg-server xorg-xinit xorg-apps

    # File System
    _info "Installing File System"
    pacman --noconfirm -S gparted ntfs-3g dosfstools ifuse fuseiso

    # KDE Plasma
    _info "Installing KDE Plasma"
    pacman --noconfirm -S plasma kde-applications kde-l10n-fr

    # SDDM
    _info "Installing SDDM"
    pacman --noconfirm -S sddm sddm-kcm

    # Desktop Themes
    _info "Installing Desktop Themes"
    pacman --noconfirm -S kde-gtk-config oxygen-gtk2 oxygen-kde4 \
    qtcurve-gtk2 qtcurve-qt5 libappindicator-gtk2 libappindicator-gtk3 \
    lib32-libappindicator-gtk2 lib32-libappindicator-gtk3 sni-qt

    # Desktop Polices
    _info "Installing Desktop Polices"
    pacman --noconfirm -S xorg-fonts-type1 ttf-dejavu artwiz-fonts \
    font-bh-ttf font-bitstream-speedo gsfonts sdl_ttf ttf-bitstream-vera \
    ttf-cheapskate ttf-liberation ttf-freefont ttf-arphic-uming ttf-baekmuk

    # Multimedia
    _info "Installing Multimedia"
    pacman --noconfirm -S phonon-qt4 phonon-qt4-gstreamer phonon-qt4-vlc \
    kamoso

    # Firefox
    _info "Installing Firefox"
    pacman --noconfirm -S firefox firefox-i18n-fr gtk3-print-backends \
    hunspell-fr flashplayer

    # Cups & scan
    #_info "Installing Cups & scan support"
    #pacman --noconfirm -S cups cups-pdf skanlite
}

_install_settings() {

    # Keyboard layout
    _info "Setting keyboard layout"
    localectl --no-convert set-x11-keymap fr

    # SDDM settings
    sed -i -e 's/Numlock=none/Numlock=on/g' /etc/sddm.conf
    setfacl -m u:sddm:x /home/${USER_name}

    # Services & Groups
    _info "Enabling services"
    systemctl enable sddm
    systemctl enable org.cups.cupsd
    _info "Add ${USER_name} to all groups"
    usermod -aG root,bin,daemon,sys,adm,tty,disk,lp,mem,kmem,wheel $USER_name
    usermod -aG ftp,mail,uucp,log,utmp,locate,rfkill,smmsp,proc $USER_name
    usermod -aG http,games,lock,uuidd,dbus,network,video,audio $USER_name
    usermod -aG optical,floppy,storage,scanner,input,power,nobody $USER_name
    usermod -aG users,systemd-journal,systemd-journal-gateway $USER_name
    usermod -aG systemd-timesync,systemd-network,systemd-bus-proxy $USER_name
    usermod -aG systemd-resolve,systemd-coredump $USER_name
    usermod -aG systemd-journal-upload,systemd-journal-remote $USER_name
    usermod -aG polkitd,git,avahi,usbmux,rtkit,sddm,mysql,colord $USER_name
}

#############
## iNSTALL ##
#############
_banner && _settings && _logs && _gpu_driver
_confirm "System ready. Do you wish to install KDE Plasma?"
(_install_yaourt && _install_packages && _install_settings) 2>&1 \
| tee -a $logfile
_note "Installation finished. Logfile: /var/log/archboot/"
_confirm "Done! $__appname__ $__version__ by $__author__ - $__license__"
sleep 2s && reboot
